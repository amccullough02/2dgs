{
  "README.html": {
    "href": "README.html",
    "title": "2DGS | 2D Gravity Simulator (2DGS)",
    "summary": "2DGS About 2DGS, as the name suggests, is an open-source 2D gravity simulator. The application is designed to provide a hands-on demonstration of classical mechanics via the lens of orbital mechanics. Dependencies Aside from MonoGame, the project makes use of the following: Myra: https://github.com/rds1983/Myra Newtonsoft.Json: https://github.com/JamesNK/Newtonsoft.Json Apos.Shapes: https://github.com/Apostolique/Apos.Shapes All of these projects are worth your support as this project may not have succeeded without them."
  },
  "api/_2dgs.AttributionsScene.html": {
    "href": "api/_2dgs.AttributionsScene.html",
    "title": "Class AttributionsScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class AttributionsScene Namespace _2dgs Assembly 2dgs.dll A scene for giving credit and attribution. public class AttributionsScene : Scene Inheritance object Scene AttributionsScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AttributionsScene(Game) A scene for giving credit and attribution. public AttributionsScene(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw(GameTime, SpriteBatch) The draw method for the Attributions Scene. public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to the MonoGame GameTime class. spriteBatch SpriteBatch A reference to the MonoGame SpriteBatch class. Update(GameTime) The update method of the Attributions Scene. public override void Update(GameTime gameTime) Parameters gameTime GameTime A reference to the MonoGame GameTime class."
  },
  "api/_2dgs.AttributionsUi.html": {
    "href": "api/_2dgs.AttributionsUi.html",
    "title": "Class AttributionsUi | 2D Gravity Simulator (2DGS)",
    "summary": "Class AttributionsUi Namespace _2dgs Assembly 2dgs.dll A class used to contain UI boilerplate for the Attributions Scene. public class AttributionsUi Inheritance object AttributionsUi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AttributionsUi(Game) The constructor for the AttributionsUi class. public AttributionsUi(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw() Draws the Myra desktop. public void Draw()"
  },
  "api/_2dgs.Body.html": {
    "href": "api/_2dgs.Body.html",
    "title": "Class Body | 2D Gravity Simulator (2DGS)",
    "summary": "Class Body Namespace _2dgs Assembly 2dgs.dll A class used to represent bodies in the 2DGS application. public class Body Inheritance object Body Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Body(string, Vector2, Vector2, float, float, Color, TextureManager) A class used to represent bodies in the 2DGS application. public Body(string name, Vector2 position, Vector2 velocity, float mass, float displaySize, Color color, TextureManager textureManager) Parameters name string The name displayed next to the body. position Vector2 The position of the body. velocity Vector2 The velocity of the body. mass float The mass of the body. displaySize float The size of the body as displayed on-screen. color Color The color of the body. textureManager TextureManager An instance of the TextureManager, used to obtain a Body texture. Fields Destroyed public bool Destroyed Field Value bool Selected public bool Selected Field Value bool Methods CheckIfDeselected(Point, MouseState) A method used to check if a body is de-selected (the mouse is within the bounds of the body). public void CheckIfDeselected(Point mousePosition, MouseState mouseState) Parameters mousePosition Point The current position of the mouse. mouseState MouseState The state of the mouse (which buttons are being clicked). CheckIfSelected(Point, MouseState) A method used to check if a body is selected (the mouse is within the bounds of the body). public void CheckIfSelected(Point mousePosition, MouseState mouseState) Parameters mousePosition Point The current position of the mouse. mouseState MouseState The state of the mouse (which buttons are being clicked). ConvertToBodyData(SimulationMediator) A helper method to convert an instance of a body to a BodyData object for serialization. public BodyData ConvertToBodyData(SimulationMediator simulationMediator) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator. Returns BodyData Draw(SpriteBatch, ShapeBatch, SimulationMediator) The draw method for the Body class, called in the SimulationScene class. public void Draw(SpriteBatch spriteBatch, ShapeBatch shapeBatch, SimulationMediator simulationMediator) Parameters spriteBatch SpriteBatch A reference to the MonoGame SpriteBatch class. shapeBatch ShapeBatch A reference to the Apos.Shapes ShapeBatch class. simulationMediator SimulationMediator A reference to the SimulationMediator class. Edit(string, Vector2, Vector2, float, float, List<Body>) A method used when editing a body instance. public void Edit(string name, Vector2 position, Vector2 velocity, float mass, float displaySize, List<Body> bodies) Parameters name string The new name of the body. position Vector2 The new position of the body. velocity Vector2 The new velocity of the body. mass float The new mass of the body. displaySize float The new display size of the body. bodies List<Body> A reference to the bodies data structure, used for updating the projected orbits of bodies post-edit. OffsetPosition(SimulationMediator) Offsets the position of bodies such that they appear in the relative center of the screen. public void OffsetPosition(SimulationMediator simulationMediator) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator. SetColor(Color) A method used to update a body's color. public void SetColor(Color color) Parameters color Color The new color of the body. Update(List<Body>, int, GameTime) The update method for the Body class, called in the SimulationScene. public void Update(List<Body> bodies, int userTimeStep, GameTime gameTime) Parameters bodies List<Body> A reference to the bodies data structure. userTimeStep int The current simulation timestep. gameTime GameTime A reference to the MonoGame GameTime class."
  },
  "api/_2dgs.BodyData.html": {
    "href": "api/_2dgs.BodyData.html",
    "title": "Class BodyData | 2D Gravity Simulator (2DGS)",
    "summary": "Class BodyData Namespace _2dgs Assembly 2dgs.dll A data class used for interop between JSON.NET and a 2DGS Body object. public class BodyData Inheritance object BodyData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Name The body's name. public string Name Field Value string Properties Color The body's color. [JsonIgnore] public Color Color { get; set; } Property Value Color ColorString Converts a body's color to/from RGB to/from hexadecimal. [JsonProperty(\"Color\")] public string ColorString { get; set; } Property Value string DisplaySize The body's display size. public float DisplaySize { get; set; } Property Value float Mass The body's mass. public float Mass { get; set; } Property Value float Position The body's position. public Vector2 Position { get; set; } Property Value Vector2 Velocity The body's velocity. public Vector2 Velocity { get; set; } Property Value Vector2"
  },
  "api/_2dgs.CreateBodyDialog.html": {
    "href": "api/_2dgs.CreateBodyDialog.html",
    "title": "Class CreateBodyDialog | 2D Gravity Simulator (2DGS)",
    "summary": "Class CreateBodyDialog Namespace _2dgs Assembly 2dgs.dll A simple UI class containing widgets for the create body dialog. public static class CreateBodyDialog Inheritance object CreateBodyDialog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(SimulationMediator, Desktop) A method to create the create body dialog. public static Dialog Create(SimulationMediator simulationMediator, Desktop desktop) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator class. desktop Desktop A reference to the desktop used in the SimulationUi class, for which this class is instantiated within. Returns Dialog The create body dialog."
  },
  "api/_2dgs.EditBodyDialog.html": {
    "href": "api/_2dgs.EditBodyDialog.html",
    "title": "Class EditBodyDialog | 2D Gravity Simulator (2DGS)",
    "summary": "Class EditBodyDialog Namespace _2dgs Assembly 2dgs.dll A simple UI class containing widgets for the edit body dialog. public static class EditBodyDialog Inheritance object EditBodyDialog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(SimulationMediator, Desktop) A method to create the edit body dialog. public static Dialog Create(SimulationMediator simulationMediator, Desktop desktop) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator class. desktop Desktop A reference to the desktop used in the SimulationUi class, for which this class is instantiated within. Returns Dialog The edit body dialog."
  },
  "api/_2dgs.EditModePanel.html": {
    "href": "api/_2dgs.EditModePanel.html",
    "title": "Class EditModePanel | 2D Gravity Simulator (2DGS)",
    "summary": "Class EditModePanel Namespace _2dgs Assembly 2dgs.dll A simple UI class containing 'edit mode' widgets. public static class EditModePanel Inheritance object EditModePanel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(SimulationMediator, Desktop) A method to create the 'edit mode' panel. public static VerticalStackPanel Create(SimulationMediator simulationMediator, Desktop desktop) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator class. desktop Desktop A reference to the desktop used in the SimulationUi class, for which this class is instantiated within. Returns VerticalStackPanel The edit mode panel."
  },
  "api/_2dgs.FadeInScene.html": {
    "href": "api/_2dgs.FadeInScene.html",
    "title": "Class FadeInScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class FadeInScene Namespace _2dgs Assembly 2dgs.dll A scene used to create a 'fade from black' transition effect. public class FadeInScene : Scene Inheritance object Scene FadeInScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FadeInScene(Game, Scene) A scene used to create a 'fade from black' transition effect. public FadeInScene(Game game, Scene destinationScene) Parameters game Game A reference to the MonoGame Game instance. destinationScene Scene A reference to the scene we want to transition to. Methods Draw(GameTime, SpriteBatch) The draw method for the public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime spriteBatch SpriteBatch Update(GameTime) The update method for the FadeInScene class. public override void Update(GameTime gameTime) Parameters gameTime GameTime A reference to MonoGame's GameTime class."
  },
  "api/_2dgs.FadeOutScene.html": {
    "href": "api/_2dgs.FadeOutScene.html",
    "title": "Class FadeOutScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class FadeOutScene Namespace _2dgs Assembly 2dgs.dll A scene used to create a 'fade to black' transition effect. public class FadeOutScene : Scene Inheritance object Scene FadeOutScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FadeOutScene(Game) A scene used to create a 'fade to black' transition effect. public FadeOutScene(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw(GameTime, SpriteBatch) The draw method for the public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime spriteBatch SpriteBatch Update(GameTime) The update method for the FadeInScene class. public override void Update(GameTime gameTime) Parameters gameTime GameTime A reference to MonoGame's GameTime class."
  },
  "api/_2dgs.FileManager.html": {
    "href": "api/_2dgs.FileManager.html",
    "title": "Class FileManager | 2D Gravity Simulator (2DGS)",
    "summary": "Class FileManager Namespace _2dgs Assembly 2dgs.dll A class used to perform rename and delete operations on files, making use of C#'s standard library. public static class FileManager Inheritance object FileManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteFile(string) Deletes a file. public static void DeleteFile(string filePath) Parameters filePath string The path of the file to be deleted. RenameFile(string, string) Renames a file. public static void RenameFile(string oldPath, string newPath) Parameters oldPath string The current path of the file to be renamed. newPath string The new path of the file to be renamed."
  },
  "api/_2dgs.FindWidget.html": {
    "href": "api/_2dgs.FindWidget.html",
    "title": "Class FindWidget | 2D Gravity Simulator (2DGS)",
    "summary": "Class FindWidget Namespace _2dgs Assembly 2dgs.dll A class used to more easily access Myra widgets. public static class FindWidget Inheritance object FindWidget Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DisableWidgets(Widget, string[]) A method to disable a widget or widgets. public static void DisableWidgets(Widget parent, string[] widgetIds) Parameters parent Widget The root widget, typically from an Ui class. widgetIds string[] An array of widget IDs. EnableWidgets(Widget, string[]) A method to enable a widget or widgets. public static void EnableWidgets(Widget parent, string[] widgetIds) Parameters parent Widget The root widget, typically from an Ui class. widgetIds string[] An array of widget IDs. GetWidgetById(Widget, string) A method to return a widget given an ID. This method will recursively search through the widget tree until either a widget is found or a null is returned indicating that no such widget exists. public static Widget GetWidgetById(Widget parent, string widgetId) Parameters parent Widget The root widget, typically from an Ui class. widgetId string The ID used to search for the widget. Returns Widget HighlightWidget(Widget, string) A method that highlights a widget given an ID. public static void HighlightWidget(Widget parent, string widgetId) Parameters parent Widget The root widget, typically from an Ui class. widgetId string The ID used to search for the widget. UnhighlightWidget(Widget, string) A method that removes a highlight from a widget given an ID. public static void UnhighlightWidget(Widget parent, string widgetId) Parameters parent Widget The root widget, typically from an Ui class. widgetId string The ID used to search for the widget."
  },
  "api/_2dgs.FontManager.html": {
    "href": "api/_2dgs.FontManager.html",
    "title": "Class FontManager | 2D Gravity Simulator (2DGS)",
    "summary": "Class FontManager Namespace _2dgs Assembly 2dgs.dll A class used to provide a facade for FontStashSharp FontSystems. public static class FontManager Inheritance object FontManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BoldText(int) Helper method to obtain a bold font. public static SpriteFontBase BoldText(int size) Parameters size int The font size. Returns SpriteFontBase A bold font SpriteFontBase of the desired size. ButtonText(int) Helper method to obtain a button font. public static SpriteFontBase ButtonText(int size) Parameters size int The font size. Returns SpriteFontBase A button font SpriteFontBase of the desired size. LightText(int) Helper method to obtain a light font. public static SpriteFontBase LightText(int size) Parameters size int The font size. Returns SpriteFontBase A light font SpriteFontBase of the desired size. MediumText(int) Helper method to obtain a medium font. public static SpriteFontBase MediumText(int size) Parameters size int The font size. Returns SpriteFontBase A medium font SpriteFontBase of the desired size. TitleText(int) Helper method to obtain a title font. public static SpriteFontBase TitleText(int size) Parameters size int The font size. Returns SpriteFontBase A title font SpriteFontBase of the desired size."
  },
  "api/_2dgs.FpsCounter.html": {
    "href": "api/_2dgs.FpsCounter.html",
    "title": "Class FpsCounter | 2D Gravity Simulator (2DGS)",
    "summary": "Class FpsCounter Namespace _2dgs Assembly 2dgs.dll A class used to display an FPS counter for performance profiling. public class FpsCounter Inheritance object FpsCounter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(SpriteBatch) Draws the FPS counter. public void Draw(SpriteBatch spriteBatch) Parameters spriteBatch SpriteBatch A reference to MonoGame's SpriteBatch class. ToggleFps() Toggles the FPS counter on/off. public void ToggleFps() Update(GameTime) Updates the FPS counter. public void Update(GameTime gameTime) Parameters gameTime GameTime A reference to MonoGame's GameTime class."
  },
  "api/_2dgs.Game.html": {
    "href": "api/_2dgs.Game.html",
    "title": "Class Game | 2D Gravity Simulator (2DGS)",
    "summary": "Class Game Namespace _2dgs Assembly 2dgs.dll The 2DGS game class, inherits from the MonoGame Game class. public class Game : Game, IDisposable Inheritance object Game Game Implements IDisposable Inherited Members Game.Dispose() Game.Dispose(bool) Game.Exit() Game.ResetElapsedTime() Game.SuppressDraw() Game.RunOneFrame() Game.Run() Game.Run(GameRunBehavior) Game.Tick() Game.BeginDraw() Game.EndDraw() Game.BeginRun() Game.EndRun() Game.UnloadContent() Game.OnActivated(object, EventArgs) Game.OnDeactivated(object, EventArgs) Game.LaunchParameters Game.Components Game.InactiveSleepTime Game.MaxElapsedTime Game.IsActive Game.IsMouseVisible Game.TargetElapsedTime Game.IsFixedTimeStep Game.Services Game.Content Game.GraphicsDevice Game.Window Game.Activated Game.Deactivated Game.Disposed Game.Exiting object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Game() The constructor for the 2DGS game class. public Game() Fields SaveSystem An instance of the 2DGS SaveSystem class. public readonly SaveSystem SaveSystem Field Value SaveSystem Properties FpsCounter An instance of the 2DGS FpsCounter class. public FpsCounter FpsCounter { get; } Property Value FpsCounter Graphics An instance of the MonoGame GraphicsDeviceManager class. public GraphicsDeviceManager Graphics { get; } Property Value GraphicsDeviceManager SceneManager An instance of the 2DGS SceneManager class. public SceneManager SceneManager { get; } Property Value SceneManager Methods Draw(GameTime) Called when the game should draw a frame. Draws the Microsoft.Xna.Framework.DrawableGameComponent instances attached to this game. Override this to render your game. protected override void Draw(GameTime gameTime) Parameters gameTime GameTime A Microsoft.Xna.Framework.GameTime instance containing the elapsed time since the last call to Microsoft.Xna.Framework.Game.Draw(Microsoft.Xna.Framework.GameTime) and the total time elapsed since the game started. Initialize() Override this to initialize the game and load any needed non-graphical resources. Initializes attached Microsoft.Xna.Framework.GameComponent instances and calls Microsoft.Xna.Framework.Game.LoadContent(). protected override void Initialize() LoadContent() Override this to load graphical resources required by the game. protected override void LoadContent() OnExiting(object, ExitingEventArgs) Called when the game is exiting. Raises the Microsoft.Xna.Framework.Game.Exiting event. protected override void OnExiting(object sender, ExitingEventArgs args) Parameters sender object This Microsoft.Xna.Framework.Game. args ExitingEventArgs The arguments to the Microsoft.Xna.Framework.Game.Exiting event. Update(GameTime) Called when the game should update. Updates the Microsoft.Xna.Framework.GameComponent instances attached to this game. Override this to update your game. protected override void Update(GameTime gameTime) Parameters gameTime GameTime The elapsed time since the last call to Microsoft.Xna.Framework.Game.Update(Microsoft.Xna.Framework.GameTime)."
  },
  "api/_2dgs.GhostBody.html": {
    "href": "api/_2dgs.GhostBody.html",
    "title": "Class GhostBody | 2D Gravity Simulator (2DGS)",
    "summary": "Class GhostBody Namespace _2dgs Assembly 2dgs.dll A class used to create a ghost body when positioning a newly created body. public class GhostBody Inheritance object GhostBody Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Position The position of the ghost body. public Vector2 Position { get; set; } Property Value Vector2 Methods Draw(SpriteBatch, TextureManager, SimulationMediator) The draw method for the GhostBody, it is drawn at a lower opacity to signify that the body is not yet a part of the simulation. public void Draw(SpriteBatch spriteBatch, TextureManager textureManager, SimulationMediator simulationMediator) Parameters spriteBatch SpriteBatch A reference to the MonoGame SpriteBatch class. textureManager TextureManager A reference to the TextureManager class. simulationMediator SimulationMediator A reference to the SimulationMediator class. Update(SimulationMediator) The update method for the GhostBody, the position will update with the position of the mouse cursor. public void Update(SimulationMediator simulationMediator) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator class."
  },
  "api/_2dgs.GlobalGameData.html": {
    "href": "api/_2dgs.GlobalGameData.html",
    "title": "Class GlobalGameData | 2D Gravity Simulator (2DGS)",
    "summary": "Class GlobalGameData Namespace _2dgs Assembly 2dgs.dll Class used to store globally accessible values. public static class GlobalGameData Inheritance object GlobalGameData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields FadeSpeed The default fade speed for fade in and fade out transitions. public const float FadeSpeed = 5 Field Value float Properties SfxVolume The default volume of sound effects in 2DGS. public static float SfxVolume { get; set; } Property Value float"
  },
  "api/_2dgs.KeyEnumConvertor.html": {
    "href": "api/_2dgs.KeyEnumConvertor.html",
    "title": "Class KeyEnumConvertor | 2D Gravity Simulator (2DGS)",
    "summary": "Class KeyEnumConvertor Namespace _2dgs Assembly 2dgs.dll A custom JSONConvertor designed to convert MonoGame Keys to a string format than be serialized. public class KeyEnumConvertor : JsonConverter<List<Keys>> Inheritance object JsonConverter JsonConverter<List<Keys>> KeyEnumConvertor Inherited Members JsonConverter<List<Keys>>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<List<Keys>>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<List<Keys>>.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadJson(JsonReader, Type, List<Keys>, bool, JsonSerializer) Reads the array of strings and converts it back into a list of MonoGame keys. public override List<Keys> ReadJson(JsonReader reader, Type objectType, List<Keys> existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The JSON.NET reader. objectType Type A generic type. existingValue List<Keys> The value being read from. hasExistingValue bool If the value being read from exists. serializer JsonSerializer Controls JSON encoding. Returns List<Keys> A list of MonoGame keys. WriteJson(JsonWriter, List<Keys>, JsonSerializer) Writes the list of MonoGame keys as an array of strings. public override void WriteJson(JsonWriter writer, List<Keys> value, JsonSerializer serializer) Parameters writer JsonWriter The JSON.NET writer. value List<Keys> The value to be written. serializer JsonSerializer Controls JSON encoding."
  },
  "api/_2dgs.KeyManager.html": {
    "href": "api/_2dgs.KeyManager.html",
    "title": "Class KeyManager | 2D Gravity Simulator (2DGS)",
    "summary": "Class KeyManager Namespace _2dgs Assembly 2dgs.dll A class used to aid in the execution of keyboard shortcuts. public static class KeyManager Inheritance object KeyManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Shortcut(List<Keys>, KeyboardState, KeyboardState, Action) A method used to encapsulate the conditions for a keyboard shortcut. Two separate keyboard states are required to prevent 'repeated' actions if the keys are held down for more than a single frame. Instead, a key (or keys) will need to be released before the shortcut can be used again. public static void Shortcut(List<Keys> keys, KeyboardState current, KeyboardState previous, Action action) Parameters keys List<Keys> The keys required to activate the shortcut. current KeyboardState The keys that are currently being held down. previous KeyboardState The keys that were just held down a previous frame. action Action The action to execute upon satisfying the conditions of the shortcut."
  },
  "api/_2dgs.LessonPage.html": {
    "href": "api/_2dgs.LessonPage.html",
    "title": "Class LessonPage | 2D Gravity Simulator (2DGS)",
    "summary": "Class LessonPage Namespace _2dgs Assembly 2dgs.dll A class used to represent a page of a lesson. public class LessonPage Inheritance object LessonPage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields HighlightWidget The widget to highlight. public string HighlightWidget Field Value string RestrictWidgets The widgets to disable. public string[] RestrictWidgets Field Value string[] Text The text content of the lesson. public string Text Field Value string"
  },
  "api/_2dgs.LessonPrompt.html": {
    "href": "api/_2dgs.LessonPrompt.html",
    "title": "Class LessonPrompt | 2D Gravity Simulator (2DGS)",
    "summary": "Class LessonPrompt Namespace _2dgs Assembly 2dgs.dll A class used to represent a 2DGS 'Lesson Prompt' window, which is used to discuss various physics concepts. public class LessonPrompt Inheritance object LessonPrompt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LessonPrompt(SimulationMediator, Button) The LessonPrompt constructor. public LessonPrompt(SimulationMediator simulationMediator, Button showButton) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator. showButton Button A reference to the button that shows the Lesson Prompt, required to disable that button if the prompt is active. Methods Show(Desktop, SimulationMediator) A method to display the lesson prompt. public void Show(Desktop desktop, SimulationMediator simulationMediator) Parameters desktop Desktop A reference to the SimulationUi desktop, this is set as the value of the desktop instance within this class. simulationMediator SimulationMediator A reference to the SimulationMediator class."
  },
  "api/_2dgs.MainMenuScene.html": {
    "href": "api/_2dgs.MainMenuScene.html",
    "title": "Class MainMenuScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class MainMenuScene Namespace _2dgs Assembly 2dgs.dll A scene for the main menu of 2DGS. public class MainMenuScene : Scene Inheritance object Scene MainMenuScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainMenuScene(Game) A scene for the main menu of 2DGS. public MainMenuScene(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw(GameTime, SpriteBatch) The draw method for the Main Menu Scene. public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to the MonoGame GameTime class. spriteBatch SpriteBatch A reference to the MonoGame SpriteBatch class. Update(GameTime) The update method of the Attributions Scene. public override void Update(GameTime gameTime) Parameters gameTime GameTime A reference to the MonoGame GameTime class."
  },
  "api/_2dgs.MainMenuUi.html": {
    "href": "api/_2dgs.MainMenuUi.html",
    "title": "Class MainMenuUi | 2D Gravity Simulator (2DGS)",
    "summary": "Class MainMenuUi Namespace _2dgs Assembly 2dgs.dll A class used to contain UI boilerplate for the Main Menu Scene. public class MainMenuUi Inheritance object MainMenuUi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MainMenuUi(Game) The constructor for the MainMenuUi class. public MainMenuUi(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw() Draws the Myra desktop. public void Draw()"
  },
  "api/_2dgs.MusicPlayer.html": {
    "href": "api/_2dgs.MusicPlayer.html",
    "title": "Class MusicPlayer | 2D Gravity Simulator (2DGS)",
    "summary": "Class MusicPlayer Namespace _2dgs Assembly 2dgs.dll Used to manage the background music in the 2DGS application. public class MusicPlayer Inheritance object MusicPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MusicPlayer(ContentManager) Used to manage the background music in the 2DGS application. public MusicPlayer(ContentManager contentManager) Parameters contentManager ContentManager A reference to MonoGame's ContentManager class. Methods Dispose() Disposes the MusicPlayer object, called when the game is closed. public void Dispose() Initialize() Initializes the class (the MusicPlayer class is intended to be implemented as a singleton). public void Initialize()"
  },
  "api/_2dgs.Position.html": {
    "href": "api/_2dgs.Position.html",
    "title": "Enum Position | 2D Gravity Simulator (2DGS)",
    "summary": "Enum Position Namespace _2dgs Assembly 2dgs.dll An enum used to represent the position of a Body's nameplate. public enum Position Fields Bottom = 3 Left = 0 Right = 1 Top = 2"
  },
  "api/_2dgs.RemapShortcutsDialog.html": {
    "href": "api/_2dgs.RemapShortcutsDialog.html",
    "title": "Class RemapShortcutsDialog | 2D Gravity Simulator (2DGS)",
    "summary": "Class RemapShortcutsDialog Namespace _2dgs Assembly 2dgs.dll A class used to organise UI boilerplate for the dialog enabling shortcut remapping. public static class RemapShortcutsDialog Inheritance object RemapShortcutsDialog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Game, SettingsMediator, SettingsSaveData) A method that creates a 2DGS dialog with shortcut remapping functionality. public static Dialog Create(Game game, SettingsMediator settingsMediator, SettingsSaveData settingsSaveData) Parameters game Game A reference to the MonoGame Game instance. settingsMediator SettingsMediator A reference to the SettingsMediator class. settingsSaveData SettingsSaveData A reference to the SettingsSaveData class. Returns Dialog"
  },
  "api/_2dgs.SaveQuitPanel.html": {
    "href": "api/_2dgs.SaveQuitPanel.html",
    "title": "Class SaveQuitPanel | 2D Gravity Simulator (2DGS)",
    "summary": "Class SaveQuitPanel Namespace _2dgs Assembly 2dgs.dll A simple UI class containing the save, quit, and show lesson options for the simulation scene. public static class SaveQuitPanel Inheritance object SaveQuitPanel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Game, SimulationMediator, Desktop) Creates the set of save, quit, and lesson options. public static VerticalStackPanel Create(Game game, SimulationMediator simulationMediator, Desktop desktop) Parameters game Game A reference to the MonoGame Game instance. simulationMediator SimulationMediator A reference to the SimulationMediator class. desktop Desktop A reference to the desktop used in the SimulationUi class, for which this class is instantiated within. Returns VerticalStackPanel A panel containing save, quit, and lesson options."
  },
  "api/_2dgs.SaveSystem.html": {
    "href": "api/_2dgs.SaveSystem.html",
    "title": "Class SaveSystem | 2D Gravity Simulator (2DGS)",
    "summary": "Class SaveSystem Namespace _2dgs Assembly 2dgs.dll A class to perform read and write operations to the simulation and user settings files. public class SaveSystem Inheritance object SaveSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LoadSettings() Reads from the user settings file. public SettingsSaveData LoadSettings() Returns SettingsSaveData A SettingsSaveData object containing data from the user settings file. LoadSimulation(string) Reads from a simulation file. public SimulationSaveData LoadSimulation(string path) Parameters path string The path of the simulation file. Returns SimulationSaveData A SimulationSaveData object containing the save data. SaveSettings(SettingsSaveData) Writes to the user settings file. public void SaveSettings(SettingsSaveData settingsSaveData) Parameters settingsSaveData SettingsSaveData The data to write. SaveSimulation(string, SimulationSaveData) Writes to a simulation file. public void SaveSimulation(string path, SimulationSaveData simulationSaveData) Parameters path string The path of the simulation file. simulationSaveData SimulationSaveData The data to write."
  },
  "api/_2dgs.Scene.html": {
    "href": "api/_2dgs.Scene.html",
    "title": "Class Scene | 2D Gravity Simulator (2DGS)",
    "summary": "Class Scene Namespace _2dgs Assembly 2dgs.dll An abstract class that provides a standardized implementation for 2DGS scenes. public abstract class Scene Inheritance object Scene Derived AttributionsScene FadeInScene FadeOutScene MainMenuScene SettingsScene SimulationMenuScene SimulationScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Draw(GameTime, SpriteBatch) An abstract method for drawing the contents of a scene. public abstract void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to MonoGame's GameTime class. spriteBatch SpriteBatch A reference MonoGame's SpriteBatch class. Update(GameTime) An abstract method for updating the contents of a scene. public abstract void Update(GameTime gameTime) Parameters gameTime GameTime A reference to MonoGame's GameTime class."
  },
  "api/_2dgs.SceneManager.html": {
    "href": "api/_2dgs.SceneManager.html",
    "title": "Class SceneManager | 2D Gravity Simulator (2DGS)",
    "summary": "Class SceneManager Namespace _2dgs Assembly 2dgs.dll A class that provides a means to manage multiple scenes. Usually implemented as a singleton. public class SceneManager Inheritance object SceneManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ChangeScene(Scene) Removes all scenes and then pushes a new one. public void ChangeScene(Scene scene) Parameters scene Scene The new scene to add. ClearScenes() Removes all scenes from the _scenes stack. public void ClearScenes() Draw(GameTime, SpriteBatch) Draws the contents of the scene at the top of the _scenes stack. public void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to MonoGame's GameTime class. spriteBatch SpriteBatch A reference to MonoGame's SpriteBatch class. PopScene() Removes the top scene from the _scenes stack. public void PopScene() PushScene(Scene) Adds a new scene to the top of the _scenes stack. public void PushScene(Scene scene) Parameters scene Scene The new scene to add. Update(GameTime) Updates the scene at the top of the _scenes stack. public void Update(GameTime gameTime) Parameters gameTime GameTime Access for MonoGame's GameTime class."
  },
  "api/_2dgs.ScreenshotManager.html": {
    "href": "api/_2dgs.ScreenshotManager.html",
    "title": "Class ScreenshotManager | 2D Gravity Simulator (2DGS)",
    "summary": "Class ScreenshotManager Namespace _2dgs Assembly 2dgs.dll A static class used to provide a facade for capturing in-game screenshots. public static class ScreenshotManager Inheritance object ScreenshotManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Capture(GraphicsDevice) A method that captures an in-game screenshot which is then saved to the user's My Pictures folder (Windows is assumed). public static void Capture(GraphicsDevice graphicsDevice) Parameters graphicsDevice GraphicsDevice A reference to MonoGame's GraphicsDevice class."
  },
  "api/_2dgs.SettingsMediator.html": {
    "href": "api/_2dgs.SettingsMediator.html",
    "title": "Class SettingsMediator | 2D Gravity Simulator (2DGS)",
    "summary": "Class SettingsMediator Namespace _2dgs Assembly 2dgs.dll A mediator class that manages communication between the settings scene, settings user interface, and settings save file. public class SettingsMediator Inheritance object SettingsMediator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultShortcuts A dictionary containing the default keyboard shortcuts. public Dictionary<string, List<Keys>> DefaultShortcuts Field Value Dictionary<string, List<Keys>> NewShortcuts A dictionary containing the new keyboard shortcuts to save. public Dictionary<string, List<Keys>> NewShortcuts Field Value Dictionary<string, List<Keys>> ShortcutPreview Provides a preview of the new shortcut before it is saved. public string ShortcutPreview Field Value string WhichShortcut Used to check which shortcut is currently being modified. public string WhichShortcut Field Value string Properties ClearShortcut Signifies if a shortcut's list of keys should be cleared. public bool ClearShortcut { get; set; } Property Value bool CurrentResolution The current resolution of the application. public Vector2 CurrentResolution { get; set; } Property Value Vector2 Remapping Signifies if the application is remapping a shortcut. public bool Remapping { get; set; } Property Value bool ResetShortcuts Signifies if all shortcuts should be reset to their default values. public bool ResetShortcuts { get; set; } Property Value bool Methods ResetNewShortcuts() Empties the NewShortcuts dictionary, useful when a new remapping process begins to prevent conflicts. public void ResetNewShortcuts()"
  },
  "api/_2dgs.SettingsMenuUi.html": {
    "href": "api/_2dgs.SettingsMenuUi.html",
    "title": "Class SettingsMenuUi | 2D Gravity Simulator (2DGS)",
    "summary": "Class SettingsMenuUi Namespace _2dgs Assembly 2dgs.dll A class used to represent public class SettingsMenuUi Inheritance object SettingsMenuUi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsMenuUi(Game, SettingsMediator) The constructor for the SettingsMenuUi class. public SettingsMenuUi(Game game, SettingsMediator settingsMediator) Parameters game Game A reference to the MonoGame Game instance. settingsMediator SettingsMediator A reference to the SettingsMediator. Methods Draw() Draws the Myra desktop. public void Draw()"
  },
  "api/_2dgs.SettingsPanel.html": {
    "href": "api/_2dgs.SettingsPanel.html",
    "title": "Class SettingsPanel | 2D Gravity Simulator (2DGS)",
    "summary": "Class SettingsPanel Namespace _2dgs Assembly 2dgs.dll A simple UI class containing widgets for the simulation settings panel. public static class SettingsPanel Inheritance object SettingsPanel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(SimulationMediator) A method that creates the settings panel. public static VerticalStackPanel Create(SimulationMediator simulationMediator) Parameters simulationMediator SimulationMediator A reference to the SimulationMediator class. Returns VerticalStackPanel A settings panel."
  },
  "api/_2dgs.SettingsSaveData.html": {
    "href": "api/_2dgs.SettingsSaveData.html",
    "title": "Class SettingsSaveData | 2D Gravity Simulator (2DGS)",
    "summary": "Class SettingsSaveData Namespace _2dgs Assembly 2dgs.dll A data class used to store data loaded from a user settings file. public class SettingsSaveData Inheritance object SettingsSaveData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EditShortcut AThe shortcut used to toggle edit mode on or off. public List<Keys> EditShortcut { get; set; } Property Value List<Keys> Fullscreen The application's display mode. public bool Fullscreen { get; set; } Property Value bool GlowShortcut The shortcut used to toggle the body glow effect. public List<Keys> GlowShortcut { get; set; } Property Value List<Keys> HorizontalResolution The horizontal resolution of the application. public int HorizontalResolution { get; set; } Property Value int NamesShortcut The shortcut used to toggle body names. public List<Keys> NamesShortcut { get; set; } Property Value List<Keys> OrbitsShortcut The shortcut used to toggle body orbits. public List<Keys> OrbitsShortcut { get; set; } Property Value List<Keys> PauseShortcut The shortcut used for pausing a simulation. public List<Keys> PauseShortcut { get; set; } Property Value List<Keys> ScreenshotShortcut The shortcut used to take an in-game screenshot. public List<Keys> ScreenshotShortcut { get; set; } Property Value List<Keys> SpeedDownShortcut THe shortcut used to decrease the timestep of a simulation. public List<Keys> SpeedDownShortcut { get; set; } Property Value List<Keys> SpeedUpShortcut The shortcut used to increase the timestep of a simulation. public List<Keys> SpeedUpShortcut { get; set; } Property Value List<Keys> TrailsShortcut The shortcut used to toggle body trails. public List<Keys> TrailsShortcut { get; set; } Property Value List<Keys> VectorsShortcut The shortcut used to toggle body vectors. public List<Keys> VectorsShortcut { get; set; } Property Value List<Keys> VerticalResolution The vertical resolution of the application. public int VerticalResolution { get; set; } Property Value int Methods Refresh(SaveSystem) Refreshes the contents of the data class. This is required to prevent stale references when the user configures new keyboard shortcuts. public void Refresh(SaveSystem saveSystem) Parameters saveSystem SaveSystem A reference to a 2DGS SaveSystem object."
  },
  "api/_2dgs.SettingsScene.html": {
    "href": "api/_2dgs.SettingsScene.html",
    "title": "Class SettingsScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class SettingsScene Namespace _2dgs Assembly 2dgs.dll A scene for configuring the application's settings. public class SettingsScene : Scene Inheritance object Scene SettingsScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SettingsScene(Game) The constructor for the Settings Scene. public SettingsScene(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw(GameTime, SpriteBatch) The draw method for the Settings Scene. public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to the MonoGame GameTime class. spriteBatch SpriteBatch A reference to the MonoGame SpriteBatch class. Update(GameTime) The update method for the settings menu, listens for keystrokes to set new shortcuts. public override void Update(GameTime gameTime) Parameters gameTime GameTime"
  },
  "api/_2dgs.SimulationMediator.html": {
    "href": "api/_2dgs.SimulationMediator.html",
    "title": "Class SimulationMediator | 2D Gravity Simulator (2DGS)",
    "summary": "Class SimulationMediator Namespace _2dgs Assembly 2dgs.dll A mediator class that manages communication between the simulation scene, simulation user interface, and simulation file. public class SimulationMediator Inheritance object SimulationMediator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ABodySelected Signifies if a body is selected (useful to preventing multiple selections which are not yet supported). public bool ABodySelected { get; set; } Property Value bool AttemptToSaveFile Signifies if the simulation should be saved to a file. public bool AttemptToSaveFile { get; set; } Property Value bool ColorSelectedBody Signifies if the selected body is to have its color updated. public bool ColorSelectedBody { get; set; } Property Value bool CreateBodyData Contains the data the user has provided to create a new body. public BodyData CreateBodyData { get; set; } Property Value BodyData DeleteSelectedBody Signifies if the selected body is to be deleted. public bool DeleteSelectedBody { get; set; } Property Value bool EditBodyData Contains the data the user has provided to edit a body. public BodyData EditBodyData { get; set; } Property Value BodyData EditMode Signifies if edit mode is enabled or not. public bool EditMode { get; set; } Property Value bool EditSelectedBody Signifies if the selected body is to be edited. public bool EditSelectedBody { get; set; } Property Value bool FilePath The file path of the simulation file the simulation has been loaded from (blank if the simulation is newly created). public string FilePath { get; set; } Property Value string Lesson Signifies if the simulation is a lesson simulation (otherwise the lesson features are disabled and saving is allowed). public bool Lesson { get; set; } Property Value bool LessonPages A list of lesson pages (used in lesson simulations). public List<LessonPage> LessonPages { get; set; } Property Value List<LessonPage> NewBodyColor The colour the user to apply to a new body. public Color NewBodyColor { get; set; } Property Value Color Paused Signifies if the simulation is paused. public bool Paused { get; set; } Property Value bool Position The position of body names relative to the bodies proper. public Position Position { get; set; } Property Value Position ResetSimulation Signifies if the simulation should be reset to its initial state. public bool ResetSimulation { get; set; } Property Value bool ScreenDimensions The current screen dimensions (used to offset bodies from relative to (0,0) to the centre of the screen. public Vector2 ScreenDimensions { get; set; } Property Value Vector2 SelectedBodyData A reference to the data on the currently selected body (used to provide a starting point for edits). public BodyData SelectedBodyData { get; set; } Property Value BodyData SimulationTitle The 'title' of the simulation (this is what displays in the lesson prompt window). public string SimulationTitle { get; set; } Property Value string TimeStep The current time step of the simulation which controls how the rate at which orbits progress. public int TimeStep { get; set; } Property Value int ToggleBodyGhost Signifies if a ghost body is to be rendered (set to true when a new body is created but not placed yet). public bool ToggleBodyGhost { get; set; } Property Value bool ToggleGlow Signifies if the bodies are glowing. public bool ToggleGlow { get; set; } Property Value bool ToggleNames Signifies if body names are showing. public bool ToggleNames { get; set; } Property Value bool ToggleOrbits Signifies if body orbits are showing. public bool ToggleOrbits { get; set; } Property Value bool ToggleTrails Signifies if body trails are showing. public bool ToggleTrails { get; set; } Property Value bool ToggleVectors Signifies if body vectors are showing. public bool ToggleVectors { get; set; } Property Value bool TrailLength The current length of body trails. public int TrailLength { get; set; } Property Value int"
  },
  "api/_2dgs.SimulationMenuScene.html": {
    "href": "api/_2dgs.SimulationMenuScene.html",
    "title": "Class SimulationMenuScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class SimulationMenuScene Namespace _2dgs Assembly 2dgs.dll A scene for providing a list of simulations available to the user. public class SimulationMenuScene : Scene Inheritance object Scene SimulationMenuScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationMenuScene(Game) A scene for providing a list of simulations available to the user. public SimulationMenuScene(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw(GameTime, SpriteBatch) The draw method for the Simulation Menu Scene. public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to the MonoGame GameTime class. spriteBatch SpriteBatch A reference to the MonoGame SpriteBatch class. Update(GameTime) The update method of the Simulation Menu Scene. public override void Update(GameTime gameTime) Parameters gameTime GameTime A reference to the MonoGame GameTime class."
  },
  "api/_2dgs.SimulationMenuUi.html": {
    "href": "api/_2dgs.SimulationMenuUi.html",
    "title": "Class SimulationMenuUi | 2D Gravity Simulator (2DGS)",
    "summary": "Class SimulationMenuUi Namespace _2dgs Assembly 2dgs.dll A class used to contain UI boilerplate for the SimulationMenuUi Scene. public class SimulationMenuUi Inheritance object SimulationMenuUi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationMenuUi(Game) The constructor for the SimulationMenuUi class. public SimulationMenuUi(Game game) Parameters game Game A reference to the MonoGame Game instance. Methods Draw() Draws the Myra desktop. public void Draw()"
  },
  "api/_2dgs.SimulationSaveData.html": {
    "href": "api/_2dgs.SimulationSaveData.html",
    "title": "Class SimulationSaveData | 2D Gravity Simulator (2DGS)",
    "summary": "Class SimulationSaveData Namespace _2dgs Assembly 2dgs.dll A class used to represent the loaded data from a simulation file. public class SimulationSaveData Inheritance object SimulationSaveData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Bodies The bodies to be simulated. public List<BodyData> Bodies Field Value List<BodyData> DefaultTimestep Specifies a default timestep for the simulation, this will be set to a lower value in simulations that demonstrate quick interactions and vice versa. public int DefaultTimestep Field Value int Description The description of the simulation that is seen in the simulation menu. Non-lesson sims will use 'A user generated simulation.', whilst lesson simulations will have a custom description outlining the physical concept therein . public string Description Field Value string IsLesson Indicates if the simulation is a lesson or sandbox simulation (if false, the lesson prompt will be hidden; if true, the save button is hidden). public bool IsLesson Field Value bool LessonPages The contents of the simulation lesson, if there is one. public List<LessonPage> LessonPages Field Value List<LessonPage> ThumbnailPath The path to the thumbnail displayed in the simulation menu. A default thumbnail is used for non-lesson sims, whilst lesson sims will have bespoke a bespoke thumbnail set in their JSON files. public string ThumbnailPath Field Value string Title The title of the simulation, this is shown in the lesson prompt. Non-lesson sims will use 'default' as they do not use a lesson prompt. public string Title Field Value string"
  },
  "api/_2dgs.SimulationScene.html": {
    "href": "api/_2dgs.SimulationScene.html",
    "title": "Class SimulationScene | 2D Gravity Simulator (2DGS)",
    "summary": "Class SimulationScene Namespace _2dgs Assembly 2dgs.dll public class SimulationScene : Scene Inheritance object Scene SimulationScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationScene(Game, string) public SimulationScene(Game game, string filePath) Parameters game Game filePath string Methods Draw(GameTime, SpriteBatch) An abstract method for drawing the contents of a scene. public override void Draw(GameTime gameTime, SpriteBatch spriteBatch) Parameters gameTime GameTime A reference to MonoGame's GameTime class. spriteBatch SpriteBatch A reference MonoGame's SpriteBatch class. Update(GameTime) An abstract method for updating the contents of a scene. public override void Update(GameTime gameTime) Parameters gameTime GameTime A reference to MonoGame's GameTime class."
  },
  "api/_2dgs.SimulationUi.html": {
    "href": "api/_2dgs.SimulationUi.html",
    "title": "Class SimulationUi | 2D Gravity Simulator (2DGS)",
    "summary": "Class SimulationUi Namespace _2dgs Assembly 2dgs.dll A class used to contain UI boilerplate for the Simulation Scene. public class SimulationUi Inheritance object SimulationUi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationUi(Game, SimulationMediator) The constructor for the SimulationUi class. public SimulationUi(Game game, SimulationMediator simulationMediator) Parameters game Game A reference to the MonoGame Game instance. simulationMediator SimulationMediator A reference to the SimulationMediator class. Methods Draw() Draws the Myra desktop. public void Draw() GetRoot() A helper method to obtain the root widget of the UI, useful for the FindWidget class. public Widget GetRoot() Returns Widget The root widget of the UI."
  },
  "api/_2dgs.SoundEffectPlayer.html": {
    "href": "api/_2dgs.SoundEffectPlayer.html",
    "title": "Class SoundEffectPlayer | 2D Gravity Simulator (2DGS)",
    "summary": "Class SoundEffectPlayer Namespace _2dgs Assembly 2dgs.dll Used to play sound effects in the 2DGS application. public class SoundEffectPlayer Inheritance object SoundEffectPlayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SoundEffectPlayer(ContentManager) A constructor for the SoundEffect Player. public SoundEffectPlayer(ContentManager contentManager) Parameters contentManager ContentManager A reference to MonoGame's ContentManager. Methods PlayCollisionSfx() A public method to play the collision sound effect. public void PlayCollisionSfx()"
  },
  "api/_2dgs.StringTransformer.html": {
    "href": "api/_2dgs.StringTransformer.html",
    "title": "Class StringTransformer | 2D Gravity Simulator (2DGS)",
    "summary": "Class StringTransformer Namespace _2dgs Assembly 2dgs.dll A class used to associate various custom string operations that 2DGS requires. public static class StringTransformer Inheritance object StringTransformer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FileNamePrettier(string) Extracts and transforms a filename to Pascal Case, with underscores replaced by spaces. public static string FileNamePrettier(string filename) Parameters filename string The filename to transform. Returns string KeyBindString(List<Keys>) Returns a human-readable representation of a keyboard shortcut. public static string KeyBindString(List<Keys> keys) Parameters keys List<Keys> The keyboard shortcut. Returns string"
  },
  "api/_2dgs.TestRunner.html": {
    "href": "api/_2dgs.TestRunner.html",
    "title": "Class TestRunner | 2D Gravity Simulator (2DGS)",
    "summary": "Class TestRunner Namespace _2dgs Assembly 2dgs.dll public static class TestRunner Inheritance object TestRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AssertApplicationDisplayMode(GraphicsDeviceManager, SettingsSaveData) public static void AssertApplicationDisplayMode(GraphicsDeviceManager graphics, SettingsSaveData settingsSaveData) Parameters graphics GraphicsDeviceManager settingsSaveData SettingsSaveData AssertApplicationName(string, string) public static void AssertApplicationName(string actualName, string expectedName) Parameters actualName string expectedName string AssertApplicationResolution(GraphicsDeviceManager, SettingsSaveData) public static void AssertApplicationResolution(GraphicsDeviceManager graphics, SettingsSaveData settingsSaveData) Parameters graphics GraphicsDeviceManager settingsSaveData SettingsSaveData AssertBodiesDataIntegrity(List<Body>, List<BodyData>) public static void AssertBodiesDataIntegrity(List<Body> bodies, List<BodyData> bodiesData) Parameters bodies List<Body> bodiesData List<BodyData> AssertBodyCreated(List<Body>, Body) public static void AssertBodyCreated(List<Body> bodies, Body newBody) Parameters bodies List<Body> newBody Body AssertBodyDeleted(List<Body>, Body) public static void AssertBodyDeleted(List<Body> bodies, Body deletedBody) Parameters bodies List<Body> deletedBody Body AssertBodyEdited(List<Body>, Body) public static void AssertBodyEdited(List<Body> bodies, Body editedBody) Parameters bodies List<Body> editedBody Body AssertFileDeletion(string) public static void AssertFileDeletion(string filePath) Parameters filePath string AssertFileRename(string, string) public static void AssertFileRename(string oldPath, string newPath) Parameters oldPath string newPath string AssertLessonDataIntegrity(List<LessonPage>, List<LessonPage>) public static void AssertLessonDataIntegrity(List<LessonPage> lessonPages, List<LessonPage> lessonData) Parameters lessonPages List<LessonPage> lessonData List<LessonPage> AssertLessonsLoaded(ListView, string) public static void AssertLessonsLoaded(ListView listView, string folderPath) Parameters listView ListView folderPath string AssertSimulationSaved(string, SimulationSaveData, SaveSystem) public static void AssertSimulationSaved(string filePath, SimulationSaveData instanceData, SaveSystem saveSystem) Parameters filePath string instanceData SimulationSaveData saveSystem SaveSystem AssertUserSimsLoaded(ListView, string) public static void AssertUserSimsLoaded(ListView listView, string folderPath) Parameters listView ListView folderPath string SaveResults() public static void SaveResults()"
  },
  "api/_2dgs.TextureManager.html": {
    "href": "api/_2dgs.TextureManager.html",
    "title": "Class TextureManager | 2D Gravity Simulator (2DGS)",
    "summary": "Class TextureManager Namespace _2dgs Assembly 2dgs.dll A data class used for handling the textures used in the 2DGS application. public class TextureManager Inheritance object TextureManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TextureManager(ContentManager, GraphicsDevice) public TextureManager(ContentManager content, GraphicsDevice graphicsDevice) Parameters content ContentManager graphicsDevice GraphicsDevice Properties AppTitle The application title texture. public Texture2D AppTitle { get; } Property Value Texture2D ArrowTip The texture used to draw the tip of a velocity vector arrow. public Texture2D ArrowTip { get; } Property Value Texture2D AttributionsBackground The Attribution screen's background texture. public Texture2D AttributionsBackground { get; } Property Value Texture2D BaseTexture A procedural texture used to draw rectangles. public Texture2D BaseTexture { get; } Property Value Texture2D BodyTexture The base texture used by bodies. public Texture2D BodyTexture { get; } Property Value Texture2D Gradient The default gradient applied to all background textures. public Texture2D Gradient { get; } Property Value Texture2D MainMenuBackground The main menu's background texture. public Texture2D MainMenuBackground { get; } Property Value Texture2D SettingsBackground The settings menu's background texture. public Texture2D SettingsBackground { get; } Property Value Texture2D SimulationBackground The background using in simulation scenes. public Texture2D SimulationBackground { get; } Property Value Texture2D SimulationMenuBackground The simulation menu's background texture. public Texture2D SimulationMenuBackground { get; } Property Value Texture2D Methods PositionAtCenter(float, float, Texture2D) A static method used to position a texture in the centre of the screen, typically used for background textures. public static Vector2 PositionAtCenter(float screenWidth, float screenHeight, Texture2D texture) Parameters screenWidth float The current width of the screen. screenHeight float The current height of the screen. texture Texture2D The texture to position. Returns Vector2 PositionAtTop(float, Texture2D, float, float) A static method used to position a texture at the top-centre of the screen. public static Vector2 PositionAtTop(float screenWidth, Texture2D texture, float padding = 0, float scaleFactor = 1) Parameters screenWidth float The current width of the screen. texture Texture2D The texture to position. padding float The amount of padding to add between the top of the screen and the top of the texture rectangle. scaleFactor float The scale of the texture (used if the texture is to change size based on vertical resolution). Returns Vector2"
  },
  "api/_2dgs.UiComponents.html": {
    "href": "api/_2dgs.UiComponents.html",
    "title": "Class UiComponents | 2D Gravity Simulator (2DGS)",
    "summary": "Class UiComponents Namespace _2dgs Assembly 2dgs.dll A basic UiComponents factory class. These are Myra components with additional defaults that are specific to 2DGS. public static class UiComponents Inheritance object UiComponents Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Button(string, bool, int, int) A method to create a standard 2DGS button. public static Button Button(string text, bool visible = true, int width = 250, int height = 60) Parameters text string The text of the button. visible bool The button's visibility. width int The pixel width of the button. height int The pixel height of the button. Returns Button A 2DGS button instance. ComboView(int) A method to create a 2DGS combo view. public static ComboView ComboView(int width = 250) Parameters width int The width of the combo view. Returns ComboView A 2DGS combo view instance. CustomColorPicker() A method to create a 2DGS color picker dialog. public static ColorPickerDialog CustomColorPicker() Returns ColorPickerDialog A 2DGS color picker dialog. DropdownLabel(string) A method to create a 2DGS dropdown label. public static Label DropdownLabel(string text) Parameters text string The label's text. Returns Label A 2DGS dropdown label instance. Grid(int, int, int) A method to create a 2DGS widget grid. public static Grid Grid(int spacing, int columns, int rows) Parameters spacing int The spacing between grid elements. columns int The number of columns the grid will have. rows int The number of rows the grid will have. Returns Grid HorizontalSeparator(int, int, int) A method to create a 2DGS horizontal separator. public static HorizontalSeparator HorizontalSeparator(int width = 250, int height = 5, int margin = 10) Parameters width int The pixel width of the button. height int The pixel height of the button. margin int The margin for the separator. Returns HorizontalSeparator A 2DGS horizontal separator instance. HorizontalSlider(int, int, int) A method to create a 2DGS horizontal slider. public static HorizontalSlider HorizontalSlider(int value, int min, int max) Parameters value int The default value for the slider. min int The minimum value for the slider. max int The maximum value for the slider. Returns HorizontalSlider A 2DGS horizontal slider instance. KeyBindLabel(string) A method to create a 2DGS key bind preview label. public static Label KeyBindLabel(string text) Parameters text string The text of the label. Returns Label A 2DGS key bind preview lable instance. LightLabel(string, int) A method to create a 2DGS light label. public static Label LightLabel(string text, int fontSize = 20) Parameters text string The text of the label. fontSize int The font size of the label. Returns Label A 2DGS light label. ListView(int) A method to create a 2DGS list view. public static ListView ListView(int width) Parameters width int The pixel width of the list view. Returns ListView A 2DGS list view. MediumLabel(string, int) A method to create a 2DGS medium label. public static Label MediumLabel(string text, int fontSize = 20) Parameters text string The text of the label. fontSize int The font size of the label. Returns Label A 2DGS medium label. MenuButton(string, bool, int, int) A method to create a 2DGS (main) menu button. public static Button MenuButton(string text, bool visible = true, int width = 250, int height = 60) Parameters text string The text of the button. visible bool The button's visibility. width int The pixel width of the button. height int The pixel height of the button. Returns Button A 2DGS (main) menu button instance. ReadOnlyTextBox(string) A method to create a 2DGS (read-only) text box. public static TextBox ReadOnlyTextBox(string text) Parameters text string The text box's text. Returns TextBox A 2DGS (read-only) text box. StyledDialog(string) A method to create a 2DGS dialog. public static Dialog StyledDialog(string title) Parameters title string The title of the dialog. Returns Dialog A 2DGS dialog. TabControl(int, int) A method to create a 2DGS tab control. public static TabControl TabControl(int width, int height) Parameters width int The pixel width of the widget. height int The pixel height of the widget. Returns TabControl A 2DGS tab control widget. TabItem(string) A method to create a 2DGS tab item. public static TabItem TabItem(string title) Parameters title string The title of the tab item. Returns TabItem A 2DGS tab item. TextBox(string) A method to create a 2DGS text box. public static TextBox TextBox(string text) Parameters text string The text box's text. Returns TextBox A 2DGS text box. TitleLabel(string) A method to create a 2DGS title label. public static Label TitleLabel(string text) Parameters text string The text of the label. Returns Label A 2DGS title label. ToggleButton(string, bool) A method to create a 2DGS toggle button. public static ToggleButton ToggleButton(string text, bool toggled) Parameters text string The text of the toggle button. toggled bool Is the toggle button enabled or not. Returns ToggleButton A 2DGS toggle button. ValidationWindow(Label) A method to create a 2DGS validation error window. public static Window ValidationWindow(Label label) Parameters label Label The label the window will contain. Returns Window A 2DGS validation error window."
  },
  "api/_2dgs.UiConstants.html": {
    "href": "api/_2dgs.UiConstants.html",
    "title": "Class UiConstants | 2D Gravity Simulator (2DGS)",
    "summary": "Class UiConstants Namespace _2dgs Assembly 2dgs.dll A class used to store UI constants, these are used in lieu of 'magic numbers' and hardcoded values. public static class UiConstants Inheritance object UiConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultButtonHeight The default height of a 2DGS button. public const int DefaultButtonHeight = 60 Field Value int DefaultButtonWidth The default width of a 2DGS button. public const int DefaultButtonWidth = 250 Field Value int DefaultDialogFontSize The default font size used in 2DGS dialog. public const int DefaultDialogFontSize = 18 Field Value int DefaultDialogOpacity Default opacity of 2DGS dialogs. public const float DefaultDialogOpacity = 0.5 Field Value float DefaultElementWidth The default width of a 2DGS UI element. public const int DefaultElementWidth = 250 Field Value int DefaultFontSize The default font size used in 2DGS. public const int DefaultFontSize = 20 Field Value int DefaultGridSpacing The default spacing 2DGS grid spacing. public const int DefaultGridSpacing = 10 Field Value int DefaultLargePadding Default 'large' amount of padding. public const int DefaultLargePadding = 10 Field Value int DefaultLessonOpacity Default opacity of a 2DGS lesson. public const float DefaultLessonOpacity = 0.8 Field Value float DefaultMainMenuFontSize The default font size used in the 2DGS main menu. public const int DefaultMainMenuFontSize = 30 Field Value int DefaultMargin The default margin of 2DGS elements. public const int DefaultMargin = 20 Field Value int DefaultMediumPadding Default 'medium' amount of padding. public const int DefaultMediumPadding = 8 Field Value int DefaultMenuButtonWidth The default width of a 2DGS main menu button. public const int DefaultMenuButtonWidth = 320 Field Value int DefaultSeparatorHeight The default height of a 2DGS horizontal separator. public const int DefaultSeparatorHeight = 5 Field Value int DefaultSmallPadding Default 'small' amount of padding. public const int DefaultSmallPadding = 6 Field Value int DefaultTextboxWidth The default width of a 2DGS textbox. public const int DefaultTextboxWidth = 150 Field Value int DefaultTitleFontSize The default font size used in 2DGS title elements. public const int DefaultTitleFontSize = 100 Field Value int DefaultTitleMargin The default margin of 2DGS title elements. public const int DefaultTitleMargin = 50 Field Value int"
  },
  "api/_2dgs.Vector2Converter.html": {
    "href": "api/_2dgs.Vector2Converter.html",
    "title": "Class Vector2Converter | 2D Gravity Simulator (2DGS)",
    "summary": "Class Vector2Converter Namespace _2dgs Assembly 2dgs.dll A custom JsonConverter for converting a MonoGame Vector2 object to a JsonObject containing floating point values. public class Vector2Converter : JsonConverter<Vector2> Inheritance object JsonConverter JsonConverter<Vector2> Vector2Converter Inherited Members JsonConverter<Vector2>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<Vector2>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<Vector2>.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadJson(JsonReader, Type, Vector2, bool, JsonSerializer) Reads from the JSON object and converts back to a Vector2 object. public override Vector2 ReadJson(JsonReader reader, Type objectType, Vector2 existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The JSON.NET reader. objectType Type A generic type. existingValue Vector2 The value being read from. hasExistingValue bool If the value being read from exists. serializer JsonSerializer Controls JSON encoding. Returns Vector2 A MonoGame Vector2 object. WriteJson(JsonWriter, Vector2, JsonSerializer) Writes the Vector2 object to a JSON object containing a value for X and Y. public override void WriteJson(JsonWriter writer, Vector2 value, JsonSerializer serializer) Parameters writer JsonWriter The JSON.NET writer. value Vector2 The value to be written. serializer JsonSerializer Controls JSON encoding."
  },
  "api/_2dgs.html": {
    "href": "api/_2dgs.html",
    "title": "Namespace _2dgs | 2D Gravity Simulator (2DGS)",
    "summary": "Namespace _2dgs Classes AttributionsScene A scene for giving credit and attribution. AttributionsUi A class used to contain UI boilerplate for the Attributions Scene. Body A class used to represent bodies in the 2DGS application. BodyData A data class used for interop between JSON.NET and a 2DGS Body object. CreateBodyDialog A simple UI class containing widgets for the create body dialog. EditBodyDialog A simple UI class containing widgets for the edit body dialog. EditModePanel A simple UI class containing 'edit mode' widgets. FadeInScene A scene used to create a 'fade from black' transition effect. FadeOutScene A scene used to create a 'fade to black' transition effect. FileManager A class used to perform rename and delete operations on files, making use of C#'s standard library. FindWidget A class used to more easily access Myra widgets. FontManager A class used to provide a facade for FontStashSharp FontSystems. FpsCounter A class used to display an FPS counter for performance profiling. Game The 2DGS game class, inherits from the MonoGame Game class. GhostBody A class used to create a ghost body when positioning a newly created body. GlobalGameData Class used to store globally accessible values. KeyEnumConvertor A custom JSONConvertor designed to convert MonoGame Keys to a string format than be serialized. KeyManager A class used to aid in the execution of keyboard shortcuts. LessonPage A class used to represent a page of a lesson. LessonPrompt A class used to represent a 2DGS 'Lesson Prompt' window, which is used to discuss various physics concepts. MainMenuScene A scene for the main menu of 2DGS. MainMenuUi A class used to contain UI boilerplate for the Main Menu Scene. MusicPlayer Used to manage the background music in the 2DGS application. RemapShortcutsDialog A class used to organise UI boilerplate for the dialog enabling shortcut remapping. SaveQuitPanel A simple UI class containing the save, quit, and show lesson options for the simulation scene. SaveSystem A class to perform read and write operations to the simulation and user settings files. Scene An abstract class that provides a standardized implementation for 2DGS scenes. SceneManager A class that provides a means to manage multiple scenes. Usually implemented as a singleton. ScreenshotManager A static class used to provide a facade for capturing in-game screenshots. SettingsMediator A mediator class that manages communication between the settings scene, settings user interface, and settings save file. SettingsMenuUi A class used to represent SettingsPanel A simple UI class containing widgets for the simulation settings panel. SettingsSaveData A data class used to store data loaded from a user settings file. SettingsScene A scene for configuring the application's settings. SimulationMediator A mediator class that manages communication between the simulation scene, simulation user interface, and simulation file. SimulationMenuScene A scene for providing a list of simulations available to the user. SimulationMenuUi A class used to contain UI boilerplate for the SimulationMenuUi Scene. SimulationSaveData A class used to represent the loaded data from a simulation file. SimulationScene SimulationUi A class used to contain UI boilerplate for the Simulation Scene. SoundEffectPlayer Used to play sound effects in the 2DGS application. StringTransformer A class used to associate various custom string operations that 2DGS requires. TestRunner TextureManager A data class used for handling the textures used in the 2DGS application. UiComponents A basic UiComponents factory class. These are Myra components with additional defaults that are specific to 2DGS. UiConstants A class used to store UI constants, these are used in lieu of 'magic numbers' and hardcoded values. Vector2Converter A custom JsonConverter for converting a MonoGame Vector2 object to a JsonObject containing floating point values. Enums Position An enum used to represent the position of a Body's nameplate."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | 2D Gravity Simulator (2DGS)",
    "summary": "Getting Started To-do..."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | 2D Gravity Simulator (2DGS)",
    "summary": "Introduction 2DGS is a project that was created for my final year of university, it is a simplistic 2D gravity simulator that attempts to emulate some of the features found in Universe Sandbox."
  },
  "index.html": {
    "href": "index.html",
    "title": "2DGS | 2D Gravity Simulator (2DGS)",
    "summary": "2DGS About 2DGS, as the name suggests, is an open-source 2D gravity simulator. The application is designed to provide a hands-on demonstration of classical mechanics via the lens of orbital mechanics. Dependencies Aside from MonoGame, the project makes use of the following: Myra: https://github.com/rds1983/Myra Newtonsoft.Json: https://github.com/JamesNK/Newtonsoft.Json Apos.Shapes: https://github.com/Apostolique/Apos.Shapes All of these projects are worth your support as this project may not have succeeded without them."
  }
}